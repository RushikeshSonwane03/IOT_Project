import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
data = pd.read_csv('mini_project.csv')

# Convert 'Gender' column to numeric values
data['Gender'].replace(to_replace=['Male', 'Female'], value=[0, 1], inplace=True)

# Select the features and target variable
Feature = data[['Gender', 'BMI', 'Mass', 'Acceleration']]
X = Feature
y = data['Force']

# Standardize the features using StandardScaler
from sklearn import preprocessing
X = preprocessing.StandardScaler().fit(X).transform(X)

# Split the data into training and test sets
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=109)

# Print the shapes of train and test sets
print('Train set:', X_train.shape, y_train.shape)
print('Test set:', X_test.shape, y_test.shape)

# Create and fit the RandomForestRegressor model
from sklearn.ensemble import RandomForestRegressor
regressor = RandomForestRegressor()
regressor.fit(X_train, y_train)

# Make predictions on the test set
y_pred = regressor.predict(X_test)
print(y_pred)

# Evaluate the model using Mean Squared Error (MSE)
from sklearn.metrics import mean_squared_error
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse}")

# Plot the actual vs predicted values
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred, c='b', alpha=0.5)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], 'r--')
plt.xlabel('Actual Force')
plt.ylabel('Predicted Force')
plt.title('Actual vs Predicted Values')
plt.show()

# Get feature importances
importance = regressor.feature_importances_

# Convert X array back to DataFrame
X_df = pd.DataFrame(X, columns=['Gender', 'BMI', 'Mass', 'Acceleration'])

# Plot feature importances
plt.figure(figsize=(8, 4))
plt.bar(X_df.columns, importance)
plt.xlabel('Features')
plt.ylabel('Importance')
plt.title('Feature Importances')
plt.show()
